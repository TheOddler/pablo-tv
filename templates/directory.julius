function playPath(event) {
  mkWatchedChangingFunction("PlayPath", true)(event);
}

function markAsWatched(event) {
  mkWatchedChangingFunction("MarkAsWatched", true)(event);
}

function markAsUnwatched(event) {
  mkWatchedChangingFunction("MarkAsUnwatched", false)(event);
}

function mkWatchedChangingFunction(actionTag, watchedStatus) {
  return async function (event) {
    // This prevents scrolling to the top of the page when pressing the link
    event.preventDefault();

    const pathElement = findElementWithPath(event.target);
    if (!pathElement) {
      return;
    }

    const path = pathElement.dataset.path;
    const response = await sendAction({ tag: actionTag, path });

    if (response.ok) {
      pathElement.classList.toggle("watched", watchedStatus);
    }
  };
}

/**
 * @param {Element} element
 * @returns {Element | null}
*/
function findElementWithPath(element) {
  while (element && element.dataset.path === undefined) {
    element = element.parentElement;
  }
  return element;
}

function playAll(event) {
  // This prevents scrolling to the top of the page when pressing the link
  event.preventDefault();
  sendAction('#{ActionPlayPath $ Dir absPath}');
}

function markAllAsWatched(event) {
  mkAllWatchedChangingFunction('#{ActionMarkAsWatched $ Dir absPath}', true)(event);
}

function markAllAsUnwatched(event) {
  mkAllWatchedChangingFunction('#{ActionMarkAsUnwatched $ Dir absPath}', false)(event);
}

function setWatchAllFrontend(watchedStatus) {
  const elements = document.querySelectorAll('[data-path]');
  elements.forEach((element) => {
    element.classList.toggle("watched", watchedStatus);
  });
}

function mkAllWatchedChangingFunction(action, watchedStatus) {
  return async function (event) {
    // This prevents scrolling to the top of the page when pressing the link
    event.preventDefault();

    const response = await sendAction(action);

    if (response.ok) {
      const elements = document.querySelectorAll('[data-path]');
      elements.forEach((element) => {
        element.classList.toggle("watched", watchedStatus);
      });
    }
  };
}

function refreshLibrary(event) {
  // This prevents scrolling to the top of the page when pressing the link
  event.preventDefault();
  // Do the actual action
  sendAction('#{ActionRefreshTVState}');
  // Disable the button to prevent multiple clicks
  const target = event.target;
  target.classList.add("disabled");
  // Re-enable the button after 5 seconds
  setTimeout(() => {
    target.classList.remove("disabled");
  }, 5000);
}
