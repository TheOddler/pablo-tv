const webSocket = new ReconnectingWebSocket('@{MobileHomeR}');

// Helper
function clickMouse(button) {
  sendActionWS(webSocket, { tag: "ClickMouse", button });
}
function pressKey(key) {
  sendActionWS(webSocket, { tag: "PressKeyboard", key });
}
function isTouchDevice() {
  return (('ontouchstart' in window) ||
    (navigator.maxTouchPoints > 0) ||
    (navigator.msMaxTouchPoints > 0));
}
// Depending on wether we have touch or not, we pretend click events are different
const clickEvent = isTouchDevice() ? "touchend" : "click";

// Trackpad
const trackpad = document.getElementById("trackpad");
let previousTouches;
const handleTouchMove = throttle((event) => {
  if (event.touches.length == 1 && previousTouches?.length == 1) {
    // Move mouse
    const touch = event.touches[0];
    const previousTouch = previousTouches[0];
    const x = touch.pageX - previousTouch.pageX;
    const y = touch.pageY - previousTouch.pageY;
    sendActionWS(webSocket, { tag: "MoveMouse", x, y });
  }
  else if (event.touches.length == 2 && previousTouches?.length == 2) {
    // Simulate scrolling
    const startY = (event.touches[0].pageY + event.touches[1].pageY) / 2;
    const previousStartY = (previousTouches[0].pageY + previousTouches[1].pageY) / 2;
    const scrollY = Math.round((previousStartY - startY) / 10);
    sendActionWS(webSocket, { tag: "MouseScroll", amount: scrollY });
  }

  previousTouches = event.touches;
});
trackpad.addEventListener("touchstart", e => previousTouches = e.touches);
trackpad.addEventListener("touchmove", handleTouchMove);
trackpad.addEventListener("clickEvent", () => clickMouse("left"));

// Click buttons
document.getElementById("left").addEventListener(clickEvent, () => clickMouse("left"));
document.getElementById("right").addEventListener(clickEvent, () => clickMouse("right"));

// Pointer
(() => {
  /** @typedef {{ leftRight: number, upDown: number }} Orientation  */
  /** @type {Orientation} */
  let raw;
  /** @type {Orientation} */
  let smoothed;
  /** @type {Orientation} */
  let center;

  const scalingFactor = 5;
  const jitterReduction = 10;
  let active = false;

  /**
   * @param a {number}
   * @param b {number}
   */
  function diffAngle(a, b) {
    let diff = (a - b + 720) % 360;
    if (diff > 180) diff -= 360;
    return diff;
  }

  /**
   * @param from {number}
   * @param to {number}
   */
  function slowMove(from, to) {
    return from + (to - from) / jitterReduction;
  }

  /** @param event {{ alpha: number, beta: number }} */
  function handleOrientation(event) {
    // Even update raw when not active to reset center works
    raw = {
      leftRight: event.alpha, // [0, 360[
      upDown: event.beta, // [-180, 180]
    };

    console.log(active);

    if (!active) return;
    if (!center) center = raw;
    if (!smoothed) smoothed = raw;

    const angleLR = diffAngle(raw.leftRight, center.leftRight);
    const angleUD = diffAngle(raw.upDown, center.upDown);
    const newLR = Math.tan(angleLR * Math.PI / 180);
    const newUD = Math.tan(angleUD * Math.PI / 180);
    smoothed = {
      leftRight: slowMove(smoothed.leftRight, newLR),
      upDown: slowMove(smoothed.upDown, newUD)
    }

    sendOrientation(smoothed);
  };

  const sendOrientation = throttle((value) => {
    sendActionWS(webSocket, {
      tag: "PointMouse",
      leftRight: -value.leftRight * scalingFactor,
      upDown: -value.upDown * scalingFactor,
    });
  });

  function resetCenter() {
    center = raw;
    smoothed = { leftRight: 0, upDown: 0 };
    sendOrientation(smoothed);
  }

  window.addEventListener("deviceorientation", handleOrientation, true);
  const pointerButton = document.getElementById("pointer");

  pointerButton.addEventListener("touchstart", () => active = true);
  pointerButton.addEventListener("touchend", () => active = false);

  document.getElementById("recenter").addEventListener(clickEvent, resetCenter);
})();

// Keyboard
document.getElementById("keyboard").addEventListener(clickEvent, () => {
  const text = prompt("Enter text");
  if (text !== null) sendAction({ tag: "Write", text });
});

document.getElementById("move-cursor-left").addEventListener(clickEvent, () => pressKey("left"));
document.getElementById("move-cursor-right").addEventListener(clickEvent, () => pressKey("right"));
document.getElementById("backspace").addEventListener(clickEvent, () => pressKey("backspace"));
